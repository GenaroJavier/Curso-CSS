* {
	font-family: 'Quicksand', sans-serif;
	font-weight: bold;
}

body {
	background-color: #a9d6e5;
}

h1, h2 {
	text-align: center;
	color: #2b2d42;
}

h1 {
	padding: 10px 0 0 0;
	font-weight: 900;
}

.sub-container {
	padding: 20px 0 10px 0;
}

.flex-item p{
	color: snow;
}

.flex-item {
	border: 2px solid white;
	color: #8d99ae;
	width: 120px;
	height: 120px;
	text-align: center;
	margin: 5px;
}

.flex-container {
	width: 70%;
	margin: auto;
}

.flex-container-1 {
	border: 2px solid #8d99ae;
	background-color: #2b2d42;
	display: flex;
	flex-flow: row wrap;
	justify-content: center;
}

.flex-container-2 {
	border: 2px solid #8d99ae;
	background-color: #2b2d42;
	display: flex;
	flex-flow: row wrap;
	justify-content: space-around;
}

.flex-container-3 {
	border: 2px solid #8d99ae;
	background-color: #2b2d42;
	display: flex;
	flex-flow: row wrap;
	justify-content: space-between;
}

.flex-container-4 {
	border: 2px solid #8d99ae;
	background-color: #2b2d42;
	display: flex;
	flex-flow: row wrap;
	justify-content: space-evenly;
}

.item-1 {
	background: #01497c;
}

.item-7{
	background: #00afb9;
}

/*
justify-content nosr sirve para alinear en el main axis
Esta propiedad es para centrar el contenido, utilizando los siguientes valores: 
- center (centra los elementos dentro del contenedor)
- space-around (Es lo mismo que margin auto, Es darle un margen automatico a todas las casas)
- space-between (Es dejar la mayor cantidad de espacio entre cajas, quiere que todas las cajas esten separadas a la misma distancia lo mas que se pueda)
- space-evenly (Es mas o menos como margin auto pero se puede trabajar por item individual, tiene)
entre otras

Flexbox
Primero que nada hay que dejar bien en claro una cosa: 
Esta propiedad requiere de dos cosas: 
1.- un Flex-Container
2.- un Flex item

Al utilizar un contenedor por defecto se comporta como un bloque, pero eso no quiere decir
que nosotros vayamos a notar las cambios en el contenedor, al contrario esta función 
afecta a lo que esta dentro del contenedor. (a sus hijos). 

Flex-box tiene dos ejes, como si se tratase de un plano cartesiano común, en esta 
propiedad adquieren nombres diferentes. 
1.- croos axis (eje y)
2.- main axis (eje x)

Ahora pon atención a esto como recordaras en un plano cartesiano hay unas flechitas 
que nos dicen a que dirección se mueve un función por así decirlo, en este caso 
es similar, el main axis empieza de lado izquiero (main-start) y termina en el lado
derecho (main-end), por otro lado en el caso del cross axis podemos decir que 
empieza desde arriba a esto le llamamos el (cross-start) y termina 
abajo o lo que se llama el (cross-end)

Lo que hacemos con css, es cambiar el flujo

Los flex items son unicamente hijos directos, no se aplican a nietos por asi decirlo 

Esta propiedad procura mantener las resoluciones de altura para que estas sean iguales 
en todos los items.
*/